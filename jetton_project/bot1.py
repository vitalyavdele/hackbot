import asyncio
import random
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram import Router

API_TOKEN = '7667200456:AAHEIcix2E6LgEwVsq62wdWa9_fZw-M1qAQ'  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞, –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ —Ä–æ—É—Ç–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚≠êÔ∏è –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª")]],
    resize_keyboard=True
)

# –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞
web_app_url = "https://hackbot-ctyu.onrender.com"  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –º–∏–Ω–∏-–∞–ø–∫–∏
web_app_button = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üìä –û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–∞–ø–∫—É", web_app=WebAppInfo(url=web_app_url))]
    ]
)

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ "—Å–∏–≥–Ω–∞–ª–∞" –¥–ª—è Mines
def generate_mines_signal():
    grid = [["\U0001f536" for _ in range(5)] for _ in range(5)]  # –ü—É—Å—Ç–æ–µ –ø–æ–ª–µ 5x5
    safe_cells = random.sample(range(25), 7)  # 7 –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫
    for idx in safe_cells:
        row, col = divmod(idx, 5)
        grid[row][col] = "‚≠êÔ∏è"  # –ó–≤–µ–∑–¥–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∫–ª–µ—Ç–∫–∏
    return grid

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command('start'))
async def start_command(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø —Å–æ—Ñ—Ç –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∏–≥—Ä—ã Mines –Ω–∞ Jetton.\n\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–∞–ø–∫—É!",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚≠êÔ∏è –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data="get_signal")],
                [InlineKeyboardButton(text="üìä –û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–∞–ø–∫—É", web_app=WebAppInfo(url=web_app_url))]
            ]
        )
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è "–ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª"
@router.callback_query(lambda c: c.data == "get_signal")
async def callback_get_signal(callback: types.CallbackQuery):
    grid = generate_mines_signal()
    response = "üí° –í–æ—Ç —Å–∏–≥–Ω–∞–ª –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥:\n\n"
    for row in grid:
        response += " ".join(row) + "\n"
    await callback.message.answer(response)
    await callback.answer()

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞
@router.message(lambda message: message.text == "‚≠êÔ∏è –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª")
async def send_signal(message: types.Message):
    grid = generate_mines_signal()
    response = "üí° –í–æ—Ç —Å–∏–≥–Ω–∞–ª –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥:\n\n"
    for row in grid:
        response += " ".join(row) + "\n"
    await message.answer(response)

# –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∏–Ω–∏-–∞–ø–∫–∏
@router.message(Command("webapp"))
async def send_web_app_link(message: types.Message):
    await message.answer("–û—Ç–∫—Ä–æ–π –º–∏–Ω–∏-–∞–ø–∫—É –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤:", reply_markup=web_app_button)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("üöÄ Bot started...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
